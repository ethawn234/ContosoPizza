
Now:

- add api documentation with swagger for Controller api
- convert to DTO and add real-world use cases 
    - (Promotions vs Pizza Order?)
    - Steps:
        1. Create helper method to convert Model -> DTOModel
        2. Refactor handlers and routers to use DTO as needed
            - GetAll():
                1. get the pizzas list
                2. include the toppings and sauce
                3. convert to DTO and return
- add a sql server
- add authentication
- seed the Toppings DB
- configure Secret Manager to hold env vars like connection string

Later:

- how does EF Core define fields as unique?

    - Adding duplicate toppings to a pizza should be idempotent?
    - Currently returns a validation error if duplicate topping is added.